openapi: 3.0.0
info:
  title: "DataVisFlask"
  description: "An API for flask visualisation"
  version: "1.0.0"

servers:
  - url: "/api"

components:
  schemas:
    Person:
      type: "object"
      required:
        - lname
      properties:
        fname:
          type: "string"
        lname:
          type: "string"
  parameters:
    person_id:
      name: "person_id"
      description: "ID of the person to get"
      in: path
      required: True
      schema:
        type: "string"
    note_id:
      name: "note_id"
      description: "ID of the note"
      in: path
      required: True
      schema:
        type: "string"
  requestBodies:
    ChartConfig:
      description: "Configuration for generating the chart"
      required: True
      content:
        application/json:
          schema:
            type: "object"
            properties:
              x_column:
                type: "string"
              y_column:
                type: "string"
            required:
              - x_column
              - y_column

    

paths:
  /people:
    get:
      operationId: "people.read_all"
      tags:
        - "People"
      summary: "Read the list of people"
      responses:
        "200":
          description: "Successfully read people list"
    post:
      operationId: "people.create"
      tags:
        - People
      summary: "Create a person"
      requestBody:
          description: "Person to create"
          required: True
          content:
            application/json:
              schema:
                #x-body-name: "person"
                $ref: "#/components/schemas/Person"
      responses:
        "201":
          description: "Successfully created person"
  /people/{person_id}:
    get:
      operationId: "people.read_one"
      tags:
        - People
      summary: "Read one person"
      parameters:
        - $ref: "#/components/parameters/person_id"
      responses:
        "200":
          description: "Successfully read person"
    put:
      tags:
        - People
      operationId: "people.update"
      summary: "Update a person"
      parameters:
        - $ref: "#/components/parameters/person_id"
      responses:
        "200":
          description: "Successfully updated person"
      requestBody:
        content:
          application/json:
            schema:
              # x-body-name: "person"
              $ref: "#/components/schemas/Person"
    delete:
      tags:
        - People
      operationId: "people.delete"
      summary: "Delete a person"
      parameters:
        - $ref: "#/components/parameters/person_id"
      responses:
        "204":
          description: "Successfully deleted person"
  /people/upload:
    post:
      summary: "Upload a file"
      description: "Uploads a file and returns a success message."
      tags:
        - People
      operationId: people.upload
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary 
      responses:
        200:
          description: "File uploaded successfully"
  /notes:
    post:
      operationId: "notes.create"
      tags:
        - Notes
      summary: "Create a note associated with a person"
      requestBody:
          description: "Note to create"
          required: True
          content:
            application/json:
              schema:
                # x-body-name: "note"
                type: "object"
                properties:
                  person_id:
                    type: "string"
                  content:
                    type: "string"
      responses:
        "201":
          description: "Successfully created a note"
  /notes/{note_id}:
    get:
      operationId: "notes.read_one"
      tags:
        - Notes
      summary: "Read one note"
      parameters:
        - $ref: "#/components/parameters/note_id"
      responses:
        "200":
          description: "Successfully read one note"
    put:
      tags:
        - Notes
      operationId: "notes.update"
      summary: "Update a note"
      parameters:
        - $ref: "#/components/parameters/note_id"
      responses:
        "200":
          description: "Successfully updated note"
      requestBody:
        content:
          application/json:
            schema:
              # x-body-name: "note"
              type: "object"
              properties:
                content:
                  type: "string"
    delete:
      tags:
        - Notes
      operationId: "notes.delete"
      summary: "Delete a note"
      parameters:
        - $ref: "#/components/parameters/note_id"
      responses:
        "204":
          description: "Successfully deleted note"
  /charts:
    post:
      summary: "Upload a chart"
      description: "Uploads a new chart or main chart"
      tags:
        - Charts
      operationId: chart_utils.upload_chart
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary 
      responses:
        200:
          description: "File uploaded successfully"
    put:
      summary: "Update chart"
      description: "Updates existing main chart"
      tags:
        - Charts
      operationId: chart_utils.update_chart
      requestBody:
        $ref: '#/components/requestBodies/ChartConfig'
      responses:
        200:
          description: "Chart updated successfully"
  /charts/download_template:
    get:
      operationId: "chart_utils.download_template"
      tags:
        - "Charts"
      summary: "Download template for chart"
      responses:
        200:
          description: "File downloaded successfully"
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        404:
          description: "File not found"